
처음 화면	문제 모음	순위	채점 상황 열람
"미라콤아이앤씨 PRO등급 3차 모의고사" 4월26일(수) 18:00 ~ 4월27일(목) 06:00 , 정답 코드 공개, 4월27일(목) 09:00~24:00
문제 번호 A: [SOL] 난폭한 죄수
시간 제한: 1 Sec  메모리 제한: 128 MB
제출: 5  해결 문제 수: 4
[제출]
문제 설명
왕국의 지하감옥이 P 개가 한 줄로 이어 있다. 감옥 번호 i 와  i+1 은 이웃한 감옥이라고 한다. 각 이웃 한 감옥에는 작은 창문이 하나 있는데, 이 창문을 통해서 서로 이야기를 할 수가 있다.
모든 죄수들은 죄수가 석방되기 전까지 모두 평화롭게 지내고 있는데, 문제가 발생 하였다. 이웃 감옥에 있는 죄수가 석방 된 것을 발견하면 이웃 감옥이 없을 때까지 이 사실을 퍼트렸다. (왜냐하면 1번 감옥이나 P번 감옥 혹은 비어 있는 감옥이 있기 때문이다. ) 이렇게 죄수가 석방 된 사실을 알게 된 죄수는 난폭한 성격 때문에 밤에 감옥을 때려 부신다. 이 사실을 안 교도관은 죄수에서 뇌물을 주기로 하였다. 죄수의 석방을 알게 된 죄수들에게 모두 금화 1개씩 주면 그들은 다시 평화롭게 살기로 하였다. 그러나 이 뇌물은 하루밖에 효과가 없다. 만약 다음날 또 다른 죄수의 석방의 사실을 알게 되면 그들은 다시 난폭 해진다. 그러면 교도관은 이 사실을 알게 된 죄수에게 또 뇌물을 주어야 한다.
왕국에서는 Q명의 죄수를 하루에 한 명씩 석방을 해야 한다. Q명의 석방 리스트가 주어질 때 교도관이 어떠한 순으로 석방을 해야 죄수들에게 주는 금화의 양을 최소화 할 수 있을까?
* C/C++ 솔루션은 다음 코드를 참조하시오.
 
#include <stdio.h>
#define INF (0x7FFFFFFF)
int P;//감옥수
int Q;//죄수수
int A[110];//석방되는죄수번호
int dp[110][110];//i~j까지죄수를석방했을때필요한최소금화수
int Dynamic(void){
      register int i, j, k, len, temp;
      for (len = 2; len < Q; len++){
            for (i = 0; i < Q - len; i++){
                  j = i + len;
                  dp[i][j] = INF;
                  for (k = i + 1; k < j; k++){
                        temp = dp[i][k] + dp[k][j] + A[j] - A[i] - 2;
                        if (dp[i][j] > temp) dp[i][j] = temp;
                  }
            }
      }
      return dp[0][Q - 1];
}
int main(void){
      register int t, i, ans; int T;
      scanf("%d", &T);
      for (t = 1; t <= T; t++){
            scanf("%d %d", &P, &Q);
            A[0] = 0;
            for (i = 1; i <= Q; i++){
                  scanf("%d", &A[i]);
            }
            A[Q + 1] = P + 1;
            Q += 2;
            ans = Dynamic();
            printf("Case #%d: %d\n", t, ans);
      }
      return 0;
}
* JAVA 솔루션은 다음 코드를 참조하시오.
 
import java.util.Scanner;
 
public class Main {
      static int INF  = 1<<30;
      static int T;//테스트케이스수
      static int P;//감옥수
      static int Q;//죄수수
      static int A[];//석방되는죄수번호
      static int dp[][];//i~j까지죄수를석방했을때필요한최소금화수
      static Scanner sc;
      public static void main(String[] args) {
            sc = new Scanner(System.in);
            T = sc.nextInt();
            for(int t=1;t<=T;t++){
                  input_data();
                  int ans = Dynamic();
                  System.out.println("Case #" + t + ": " + ans);
            }
            sc.close();
      }
      static void input_data(){
            P = sc.nextInt();
            Q = sc.nextInt();
            A = new int [Q+10];
            for (int i = 1; i <= Q; i++){
                  A[i] = sc.nextInt();
            }
            A[Q + 1] = P + 1;
            Q += 2;
           
      }
      static int Dynamic(){
            int i, j, k, len, temp;
            dp = new int [Q+10][Q+10];
            for (len = 2; len < Q; len++){
                  for (i = 0; i < Q - len; i++){
                        j = i + len;
                        dp[i][j] = INF;
                        for (k = i + 1; k < j; k++){
                             temp = dp[i][k] + dp[k][j] + A[j] - A[i] - 2;
                             if (dp[i][j] > temp) dp[i][j] = temp;
                        }
                  }
            }
            return dp[0][Q - 1];
      }
}
입력
첫번째 줄에는 정수 T 가 입력 된다. ( 1 <= T <= 100 )
두번째 줄부터 각 테스트 케이스 별로 두 줄씩 입력이 주어진다. 첫 줄에는 감옥의 수 P , 석방하는 죄수의 수 Q ( Q <= P ) 가 주어지고 두번째 줄에는 석방되는 죄수 번호가 X1, X2 … XQ 가 오름차순으로 주어진다. ( 1 <= P <= 10000 ) , (1 <= Q <= 100)
출력
각 테스트 케이스 ( X ) 에 대하여 최소로 사용할 수 있는 금화의 수 Y를 출력 하시요.
Case #X: Y
입력 예시
2
8 1
3
20 3
3 6 14
출력 예시
Case #1: 7
Case #2: 35
도움말
2번째 케이스를 보게 되면 14번죄수, 6번 죄수, 3번 죄수 순으로 석방을 해야 최소 코인을 사용 하게된다.
 처음 14번 최수를 석방 하게 되면 1~13번 죄수, 15~20번 죄수가 석방 사실을 알기 때문에 19개의 금화가 필요하다. 다음으로는 6번 죄수를 석방 하면 1~5번 죄수 7~13번 죄수가 석방 사실을 알기 때문에 12개의 금화가 필요하다. 이렇게 계산하면 총 35 개의 금화가 필요하게 되는데 이경우가 최소 비용이된다. 

[제출]


미라콤 모의고사 운영 문의
(주)코스큐 (02-6951-1355, kosqinfo@kosq.org)
장애 및 패스워드 초기화 요청
(주)윌텍 (010-3342-9323, keyseek@naver.com)