
// 방배정
//주어진 명수의 사람을 4개의 방에 배정하려고 한다.
//주어진 2차 행렬에 i번째 사람과 j번째 사람이 아는 사이일 경우 1을 모르는 사이일 경우 0의 값으로 표시하고 있다.
//아는 사람끼리 같은 방에 배정되지 않도록 할 경우 총 경우의 수는 어떻게 되는가? 이 경우 중가장 적은 방을
//이용하여 배정한다면 최소 몇 개의 방이 필요한가?

//입력 값
//9
//0 0 0 0 0 0 1 1 1
//0 0 0 1 0 0 0 1 1
//0 0 0 0 0 0 0 0 1
//0 1 0 0 1 1 0 0 0
//0 0 0 1 0 0 0 0 0
//0 0 0 1 0 0 0 0 0
//1 0 0 0 0 0 0 0 0
//1 1 0 0 0 0 0 0 0
//1 1 1 0 0 0 0 0 0
//출력값
//20412 2

#include <iostream>
using namespace std;

int N;
int person_RNum[10];   // 각 사람한테 배정된 방 번호
int relation[10][10];   // 사람 간의 관계
int needed_room = 0x12345678; // 배정하기 위해 필요한 방의 개수
int cnt, call_cnt;

// 방을 배정하기 전에, 아는 사람이 그 방에 배정되어 있는지... 


// 방을 배정하기 전에, 아는 사람이 그 방에 배정되어 있는지... 
bool check(int room_num, int kth_person)
{
	for (int i = 1; i < kth_person; i++) // kth_person번째 이전 사람 중에....
		if (relation[kth_person][i] && person_RNum[i] == room_num) // 아는 사이인데 지금 배정하려는 방에 배정되어 있는지...
			return true;

	return false;
}

void process_solution()
{
	int person_cnt_in_room[5] = { 0 };  // 각 방에 몇 명이 배정됬나.
	int t = 0;


	//for (int kth_person = 2; kth_person < 10; kth_person++)
	//	for (int i = 1; i < kth_person; i++) // kth_person번째 이전 사람 중에....
	//		if (relation[kth_person][i] && person_RNum[i] == person_RNum[kth_person]) // 아는 사이인데 지금 배정하려는 방에 배정되어 있는지...
	//			return;

	cnt++;

	for (int i = 1; i <= 9; i++) person_cnt_in_room[person_RNum[i]]++;  // 각 방에 몇 명이 있는지 카운트

	for (int i = 1; i <= 4; i++) if (person_cnt_in_room[i] > 0) t++;  // 한 사람 이상 들어가 있는 방 카운트

	if (t < needed_room) needed_room = t;

	// 방이 두 개 만 필요할 때 어떻게 배정하면 되는지 찍어봄...
	if (t == 2)
	{
		for (int i = 1; i <= 9; i++)
			cout << person_RNum[i] << "";
		cout << endl;
	}
}


void solve(int kth_person)
{
	call_cnt++;
	if (kth_person == 9) process_solution();
	else
	{
		kth_person++;
		for (int i = 1; i <= 4; i++)
		{
			if (check(i, kth_person)) continue; // 가지치기. i번 방에 kth_person번째 사람을 배정해도 되나? 아는 사람이 있나 조사함.
			person_RNum[kth_person] = i; // kth_person 번째 사람에게 i번 방 배정.
			solve(kth_person);
		}
	}
}


void main()
{
	cin >> N;

	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++)
			cin >> relation[i][j];

	solve(0);

	cout << cnt << " " << needed_room << " " << call_cnt << endl;
}

